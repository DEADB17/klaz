# -*- org-confirm-babel-evaluate: nil; -*-
#+STARTUP: overview
#+title: Klaz
#+date: <2020-05-25 Mon>
#+author: DEADB17
#+email: deadb17@gmail.com

Static generation of css classes using JavaScript based on the atomic/utility
class concept.

* Idea: Improve on atomic/utility classes

** Keep
- Single property classes
- Fixed property values (Reduce decision fatigue; keep consistency)
- Organized by break-points
- Separate from base classes

** Change
- Generate classes as they are used instead of pre-generating and purging
- Use programming language facilities for abstraction
- Write standard css properties and values but generate compact class names
- Remove break-points and pseudo-classes from class names


* Example
Writing

#+begin_src javascript
  import { klaz } from "./klaz.js";

  const breakPoints = [
    { id: "sm", q: "min-width:  640px" },
    { id: "md", q: "min-width:  960px" },
    { id: "lg", q: "min-width: 1280px" },
  ];

  const { kz, render } = klaz(breakPoints);
  const classNames = kz`;
  text-decoration: none;
  color:purple;
  sm:color: red;
  sm:hover:color: yellow;
  md:color: green;
  md:first-of-type:color: olive;
  md:hover:color: brown;
  lg:color: red;
  lg:hover:color: yellow;
  `;
#+end_src

Assigns to ~classNames~ a string with the generated classes

#+begin_src javascript
  "c7h7e c1ypurple c1yred c1yyellow c1ygreen c1yolive c1ybrown"
#+end_src

As a side effect an internal style-sheet object is updated. When rendered it yields

#+begin_src javascript
  render();
#+end_src

#+begin_src css
  c7h7e { text-decoration: none; }
  c1ypurple { color: purple; }
  @media (min-width:  640px) {
    c1yred { color: red; }
    c1yyellow:hover { color: yellow; }
  }
  @media (min-width:  960px) {
    c1ygreen { color: green; }
    c1yolive:first-of-type { color: olive; }
    c1ybrown:hover { color: brown; }
  }
  @media (min-width: 1280px) {
    c1yred { color: red; }
    c1yyellow:hover { color: yellow; }
  }
#+end_src
